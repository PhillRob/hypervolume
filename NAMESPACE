useDynLib(hypervolume)

export(hypervolume, 
       hypervolume_set, 
       hypervolume_inclusion_test, 
       hypervolume_prune, 
       hypervolume_segment, 
       hypervolume_thin, 
       estimate_bandwidth, 
       get_volume, 
       hypervolume_variable_importance, 
       hypervolume_holes, 
       expectation_box, 
       expectation_convex, 
       expectation_maximal, 
       expectation_ball, 
       hypervolume_join, 
       hypervolume_distance, 
       hypervolume_sorensen_overlap, # consider removing
       hypervolume_centroid,
       
       hypervolume_overlap_statistics,

       hypervolume_estimate_probability,
       expectation_adaptive_box,
       hypervolume_svm,
       hypervolume_box,
       hypervolume_gaussian,
       expectation_convex,
       estimate_threshold_gaussian,
       weight_data,

       hypervolume_quantile_threshold,
       hypervolume_project,
       
       print.Hypervolume,
       print.HypervolumeList,
       plot.Hypervolume,
       plot.HypervolumeList,
       show.Hypervolume,
       show.HypervolumeList,
       summary.Hypervolume,
       summary.HypervolumeList
       ) 

exportClasses(
    "Hypervolume",
     "HypervolumeList" 
)


 	
S3method(print, Hypervolume)
S3method(print, HypervolumeList)
S3method(summary, Hypervolume)
S3method(summary, HypervolumeList)
S3method(plot, Hypervolume)
S3method(plot, HypervolumeList)

S3method(get_volume, Hypervolume)
S3method(get_volume, HypervolumeList)

import(Rcpp)
import(geometry)
import(MASS)
import(methods)
import(rgl)
import(ks)
import(fastcluster)
import(compiler)
import(e1071)
importFrom("raster","raster", "getValues","values")

importFrom("grDevices", "col2rgb", "rainbow", "rgb")
importFrom("graphics", ".filled.contour", "axis", "box", "contour","par", "plot", "points", "text")
importFrom("stats", "cor", "cutree", "dist", "na.omit", "pgamma","rnorm", "runif", "sd")
importFrom("utils", "data", "head")

