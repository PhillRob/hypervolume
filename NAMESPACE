useDynLib(hypervolume)

export( 
  estimate_bandwidth, 
  estimate_threshold_gaussian,
  expectation_adaptive_box,
  expectation_ball, 
  expectation_box, 
  expectation_convex,
  expectation_convex, 
  expectation_maximal, 
  get_volume, 
  hypervolume_box,
  hypervolume_centroid,
  hypervolume_distance, 
  hypervolume_estimate_probability,
  hypervolume_gaussian,
  hypervolume_holes, 
  hypervolume_inclusion_test, 
  hypervolume_join, 
  hypervolume_other,
  hypervolume_overlap_statistics,
  hypervolume_project,
  hypervolume_prune, 
  hypervolume_quantile_threshold,
  hypervolume_redundancy,
  hypervolume_segment, 
  hypervolume_set, 
  hypervolume_svm,
  hypervolume_thin, 
  hypervolume_variable_importance, 
  hypervolume, 
  plot.Hypervolume,
  plot.HypervolumeList,
  print.Hypervolume,
  print.HypervolumeList,
  show.Hypervolume,
  show.HypervolumeList,
  summary.Hypervolume,
  summary.HypervolumeList,
  weight_data

       ) 

exportClasses(
    "Hypervolume",
     "HypervolumeList" 
)


 	
S3method(print, Hypervolume)
S3method(print, HypervolumeList)
S3method(summary, Hypervolume)
S3method(summary, HypervolumeList)
S3method(plot, Hypervolume)
S3method(plot, HypervolumeList)

S3method(get_volume, Hypervolume)
S3method(get_volume, HypervolumeList)

import(Rcpp)
import(geometry)
import(MASS)
import(methods)
import(rgl)
import(ks)
import(fastcluster)
import(compiler)
import(e1071)
importFrom("raster","raster", "getValues","values")

importFrom("grDevices", "col2rgb", "rainbow", "rgb")
importFrom("graphics", ".filled.contour", "axis", "box", "contour","par", "plot", "points", "text")
importFrom("stats", "cor", "cutree", "dist", "na.omit", "pgamma","rnorm", "runif", "sd")
importFrom("utils", "data", "head")
importFrom("maps", "map")

